import {
  Dropdown_default,
  alignPropType
} from "./chunk-YYEHGMOP.js";
import {
  require_prop_types
} from "./chunk-ZOS4QECH.js";
import {
  Button_default2 as Button_default
} from "./chunk-6TJZ6MJH.js";
import {
  require_classnames,
  useBootstrapPrefix
} from "./chunk-OLLCWAQ4.js";
import {
  require_jsx_runtime
} from "./chunk-WLVB5OIP.js";
import {
  require_react
} from "./chunk-CANBAPAS.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/react-bootstrap/esm/SplitButton.js
var React2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/react-bootstrap/esm/ButtonGroup.js
var import_classnames = __toESM(require_classnames());
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var ButtonGroup = React.forwardRef(({
  bsPrefix,
  size,
  vertical = false,
  className,
  role = "group",
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  as: Component = "div",
  ...rest
}, ref) => {
  const prefix = useBootstrapPrefix(bsPrefix, "btn-group");
  let baseClass = prefix;
  if (vertical) baseClass = `${prefix}-vertical`;
  return (0, import_jsx_runtime.jsx)(Component, {
    ...rest,
    ref,
    role,
    className: (0, import_classnames.default)(className, baseClass, size && `${prefix}-${size}`)
  });
});
ButtonGroup.displayName = "ButtonGroup";
var ButtonGroup_default = ButtonGroup;

// node_modules/react-bootstrap/esm/SplitButton.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var propTypes = {
  /**
   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.
   * @type {string}
   * @required
   */
  id: import_prop_types.default.string,
  /**
   * Accessible label for the toggle; the value of `title` if not specified.
   */
  toggleLabel: import_prop_types.default.string,
  /** An `href` passed to the non-toggle Button */
  href: import_prop_types.default.string,
  /** An anchor `target` passed to the non-toggle Button */
  target: import_prop_types.default.string,
  /** An `onClick` handler passed to the non-toggle Button */
  onClick: import_prop_types.default.func,
  /** The content of the non-toggle Button.  */
  title: import_prop_types.default.node.isRequired,
  /** A `type` passed to the non-toggle Button */
  type: import_prop_types.default.string,
  /** Disables both Buttons  */
  disabled: import_prop_types.default.bool,
  /**
   * Aligns the dropdown menu.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   *
   * @type {"start"|"end"|{ sm: "start"|"end" }|{ md: "start"|"end" }|{ lg: "start"|"end" }|{ xl: "start"|"end"}|{ xxl: "start"|"end"} }
   */
  align: alignPropType,
  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */
  menuRole: import_prop_types.default.string,
  /** Whether to render the dropdown menu in the DOM before the first time it is shown */
  renderMenuOnMount: import_prop_types.default.bool,
  /**
   *  Which event when fired outside the component will cause it to be closed.
   *
   * _see [DropdownMenu](#dropdown-menu-props) for more details_
   */
  rootCloseEvent: import_prop_types.default.string,
  /**
   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to
   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).
   *
   */
  flip: import_prop_types.default.bool,
  /** @ignore */
  bsPrefix: import_prop_types.default.string,
  /** @ignore */
  variant: import_prop_types.default.string,
  /** @ignore */
  size: import_prop_types.default.string
};
var SplitButton = React2.forwardRef(({
  id,
  bsPrefix,
  size,
  variant,
  title,
  type = "button",
  toggleLabel = "Toggle dropdown",
  children,
  onClick,
  href,
  target,
  menuRole,
  renderMenuOnMount,
  rootCloseEvent,
  flip,
  ...props
}, ref) => (0, import_jsx_runtime3.jsxs)(Dropdown_default, {
  ref,
  ...props,
  as: ButtonGroup_default,
  children: [(0, import_jsx_runtime2.jsx)(Button_default, {
    size,
    variant,
    disabled: props.disabled,
    bsPrefix,
    href,
    target,
    onClick,
    type,
    children: title
  }), (0, import_jsx_runtime2.jsx)(Dropdown_default.Toggle, {
    split: true,
    id,
    size,
    variant,
    disabled: props.disabled,
    childBsPrefix: bsPrefix,
    children: (0, import_jsx_runtime2.jsx)("span", {
      className: "visually-hidden",
      children: toggleLabel
    })
  }), (0, import_jsx_runtime2.jsx)(Dropdown_default.Menu, {
    role: menuRole,
    renderOnMount: renderMenuOnMount,
    rootCloseEvent,
    flip,
    children
  })]
}));
SplitButton.propTypes = propTypes;
SplitButton.displayName = "SplitButton";
var SplitButton_default = SplitButton;

export {
  ButtonGroup_default,
  SplitButton_default
};
//# sourceMappingURL=chunk-GETJQ6HS.js.map
